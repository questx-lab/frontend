name: Build and Deploy to GKE for platform

on:
  pull_request:
    branches: ['staging', 'production', 'develop']
    # types: ['closed']

env:
  PROJECT_ID: ${{ vars.PROJECT_ID }} # TODO: update Google Cloud project id
  GAR_LOCATION: ${{ vars.GAR_LOCATION }} # TODO: update Artifact Registry location
  SERVICE: ${{ vars.SERVICE_NAME }} # TODO: update Cloud Run service name
  APP_NAME: ${{ vars.APP_NAME }}
  GKE_CLUSTER_NAME: ${{ vars.GKE_CLUSTER_NAME }}
  CLUSTER_REGION: ${{ vars.CLUSTER_REGION }}
  ENV_FILE: ${{ vars.ENV_FILE }}
  GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
  DOMAIN: ${{ vars.DOMAIN }}
  MAINTENANCE_IP: ${{ vars.MAINTENANCE_IP }}

jobs:
  deploy:
    # if: ${{ github.event.pull_request.merged }}
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'
    environment: ${{ github.base_ref }}

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          credentials_json: '${{ env.GCP_CREDENTIALS }}'

      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      - name: Build and Push Container
        run: |-
          echo "${{ env.ENV_FILE }}" > ./.env.local
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.APP_NAME }}/${{ env.SERVICE }}:${{ github.sha }}" . -f deploy/Dockerfile --no-cache
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.APP_NAME }}/${{ env.SERVICE }}:${{ github.sha }}"

      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v0
        with:
          cluster_name: ${{ env.GKE_CLUSTER_NAME }}
          location: ${{ env.CLUSTER_REGION }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Install helm
        run: |-
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Clean deployments
        run: |-
          kubectl delete deployment frontend -n frontend --ignore-not-found

      - name: Deploy
        run: |-
          IMG=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.APP_NAME }}/${{ env.SERVICE }}
          TAG=${{ github.sha }}

          helm upgrade --install frontend ./deploy/frontend \
          --namespace frontend \
          --set=image.tag="${{ github.sha }}" \
          --set=image.repository="$IMG" \
          --set=ingress.hosts[0].host=${{ env.DOMAIN }} \
          --set=ingress.hosts[0].paths[0].path="/" \
          --set=ingress.hosts[0].paths[0].pathType=Prefix \
          --create-namespace

      - name: Retrieve IP
        id: retrieve_ip
        run: |-
          ip_pattern="[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}"
          ip=$(gcloud compute forwarding-rules list --filter="name=( 'frontend-dev-https' )" | grep -o "[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}")

          echo "ip=$ip" >> "$GITHUB_OUTPUT"

      - name: Google Auth for staging
        id: auth_staging
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          credentials_json: '${{ env.GCP_STAGING_CREDENTIALS }}'

      - name: Update to maintenance IP
        run: |-
          gcloud dns record-sets update ${{ env.DOMAIN }} \
          --rrdatas=${{ env.MAINTENANCE_IP }} \
          --ttl=300 \
          --type=A \
          --zone=xquest-xyz

          sleep 2m 
          ip=${{ steps.retrieve_ip.outputs.ip }}

          gcloud dns record-sets update ${{ env.DOMAIN }} \
          --rrdatas=$ip \
          --ttl=300 \
          --type=A \
          --zone=xquest-xyz
